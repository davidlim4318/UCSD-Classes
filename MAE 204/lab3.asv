%% Lab 3 (Inverse Kinematics)
% MAE 204
% TA: Jiayao
% Thanks Harry (TA for Win 24 to initiate this script)
% Modified by David Lim, 02/20/25
% Computes inverse kinematics for each waypoints in the sequence, then
% outputs the joint angle sets as well as gripper state as waypoint_array.csv file
% waypoint_array.csv will be saved in Matlab's current directory

clc
clear
close all

%% Part 1: Establishing screw axes S and end-effector zero config M
% First, define the screw axes, in (mm)

S1 = [0, 0, 1, -300, 0, 0]';
S2 = [0, 1, 0, -152-88, 0, 0]';
S3 = [0, 1, 0, -152-88, 0, 244]';
S4 = [0, 1, 0, -152-88, 0, 244+213]';
S5 = [0, 0, -1, 300-120+93-104, 244+213, 0]';
S6 = [0, 1, 0, -152-88+85, 0, 244+213]';

% Next, define the M matrix (the zero-position e-e transformation matrix),
% in (mm)

M = [...
    1 0 0 244+213; ...
    0 1 0 -300+120-93+104+92+155; ...
    0 0 1 152+88-85; ...
    0 0 0 1];

%% Part 2: UR3e sequence planning
% You may use this space to define the waypoints for your sequence (I
% recommend using SE(3) matrices to define gripper configurations)

standby = [...
    0 0 1 323.6; ...
    -1 0 0 -335.6; ...
    0 -1 0 237; ...
    0 0 0 1];
legs_grab = [...
    1 0 0 400; ...
    0 0 1 -200; ...
    0 -1 0 50; ...
    0 0 0 1];
legs_release = [...
    1 0 0 450; ...
    0 0 1 -150; ...
    0 -1 0 55; ...
    0 0 0 1];
body_grab = [...
    0 0 1 450; ...
    -1 0 0 -450; ...
    0 -1 0 70; ...
    0 0 0 1];
body_release = [...
    1 0 0 450; ...
    0 0 1 -150; ...
    0 -1 0 85; ...
    0 0 0 1];
head_grab = [...
    0 0 1 450; ...
    -1 0 0 -300; ...
    0 -1 0 130; ...
    0 0 0 1];
head_release = [...
    1 0 0 450; ...
    0 0 1 -150; ...
    0 -1 0 110; ...
    0 0 0 1];

%% Part 3: Inverse kinematics for each waypoint
% Compute inverse kinematics to obtain 6 joint angles for each waypoint,
% then save them in waypoint_array
%
% waypoint_array = n x 7 array where:
% n = number of waypoints
% First 6 columns in each row = joint angles 1...6, in degrees
% Last column in each row = gripper state (0 for open, 1 for close)

Slist = [S1 S2 S3 S4 S5 S6];
ew = 1e-3;  % rad
ev = 1e-3;  % mm

addpath('/Users/davidlim/Documents/ModernRobotics/packages/MATLAB/mr');

standby_theta = deg2rad([-30 -90 90 -90 -90 150])';

theta0 = standby_theta;
Tsd = legs_grab;
[theta, flag] = IKinSpace(Slist, M, Tsd, theta0, ew, ev);
if flag ~= 1; error('Result did not converge!'); end
if max(abs(theta)) > 2*pi; error('Joint limit exceeded!'); end
legs_grab_theta = theta;

theta0 = legs_grab_theta;
Tsd = legs_release;
[theta, flag] = IKinSpace(Slist, M, Tsd, theta0, ew, ev);
if flag ~= 1; error('Result did not converge!'); end
if max(abs(theta)) > 2*pi; error('Joint limit exceeded!'); end
legs_release_theta = theta;

theta0 = standby_theta;
Tsd = body_grab;
[theta, flag] = IKinSpace(Slist, M, Tsd, theta0, ew, ev);
if flag ~= 1; error('Result did not converge!'); end
if max(abs(theta)) > 2*pi; error('Joint limit exceeded!'); end
body_grab_theta = theta;

theta0 = standby_theta;
Tsd = body_release;
[theta, flag] = IKinSpace(Slist, M, Tsd, theta0, ew, ev);
if flag ~= 1; error('Result did not converge!'); end
if max(abs(theta)) > 2*pi; error('Joint limit exceeded!'); end
body_release_theta = theta;

theta0 = standby_theta;
Tsd = head_grab;
[theta, flag] = IKinSpace(Slist, M, Tsd, theta0, ew, ev);
if flag ~= 1; error('Result did not converge!'); end
if max(abs(theta)) > 2*pi; error('Joint limit exceeded!'); end
head_grab_theta = theta;

theta0 = standby_theta;
Tsd = head_release;
[theta, flag] = IKinSpace(Slist, M, Tsd, theta0, ew, ev);
if flag ~= 1; error('Result did not converge!'); end
if max(abs(theta)) > 2*pi; error('Joint limit exceeded!'); end
head_release_theta = theta;

%%
theta_array = [...
    standby_theta legs_grab_theta legs_release_theta ...
    standby_theta body_grab_theta standby_theta body_release_theta ...
    standby_theta head_grab_theta standby_theta head_release_theta standby_theta];
waypoint_array = [rad2deg(theta_array); ...
    0 1 0 ...
    0 1 1 0 ...
    0 1 1 0 0]';

%% Some basic sanity checks (DO NOT EDIT THIS PART)
% size of waypoint_array check
if length(waypoint_array(1,:)) ~= 7
    error('waypoint_array should have 7 columns')
end

for i = 1:length(waypoint_array(:,1))
    for j = 1:5
        % Joint limit check (error if out of joint limit bounds)
        if waypoint_array(i,j) > 360 || waypoint_array(i,j) < -360
            error(['Error: joint ',num2str(j),' in waypoint number ',num2str(i),' is out of joint limit bounds']);
        end
        % Gripper state check (error if not 0 or 1)
        if waypoint_array(i,7) ~= 0 && waypoint_array(i,7) ~= 1
            error(['Error: gripper state in waypoint number ',num2str(i),' is invalid. It should be 0 or 1']);
        end
    end
end

%% Output array to waypoint_array.csv
% waypoint_array.csv will be located in Matlab's current directory
writematrix(waypoint_array,'waypoint_array.csv')